{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar NewChatScreen = function (_Component) {\n  _inherits(NewChatScreen, _Component);\n  var _super = _createSuper(NewChatScreen);\n  function NewChatScreen(props) {\n    var _this;\n    _classCallCheck(this, NewChatScreen);\n    _this = _super.call(this, props);\n    _this.handleChatNameChange = function (text) {\n      _this.setState({\n        chatName: text\n      });\n    };\n    _this.handleSearchChange = function (searchQuery) {\n      _this.setState({\n        searchQuery: searchQuery\n      });\n    };\n    _this.handleSearch = _asyncToGenerator(function* () {\n      if (_this.state.searchQuery) {\n        var user = yield _this.searchUsers(_this.state.searchQuery);\n        _this.setState({\n          searchResults: user ? [user] : []\n        });\n      } else {\n        _this.fetchContacts();\n      }\n    });\n    _this.searchUsers = function () {\n      var _ref2 = _asyncToGenerator(function* (searchQuery) {});\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    _this.fetchContacts = _asyncToGenerator(function* () {});\n    _this.addToChat = function (contact) {\n      _this.setState(function (prevState) {\n        return {\n          chatParticipants: [].concat(_toConsumableArray(prevState.chatParticipants), [contact])\n        };\n      });\n    };\n    _this.createNewChat = _asyncToGenerator(function* () {\n      var _this$state = _this.state,\n        chatName = _this$state.chatName,\n        chatParticipants = _this$state.chatParticipants;\n      if (chatName && chatParticipants.length > 0) {\n        try {\n          var response = yield fetch('http://localhost:3333/api/1.0.0/chat', {\n            method: 'POST',\n            headers: {\n              'X-Authorization': yield AsyncStorage.getItem('whatsthat_session_token'),\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              name: chatName,\n              participants: chatParticipants.map(function (participant) {\n                return participant.userId;\n              })\n            })\n          });\n          if (response.status === 201) {\n            Alert.alert('Success', 'New chat created successfully');\n          } else {\n            throw 'Server Error';\n          }\n        } catch (error) {\n          Alert.alert('Error', error.toString());\n        }\n      } else {\n        Alert.alert('Error', 'Please input chat name and add at least one participant');\n      }\n    });\n    _this.state = {\n      chatName: '',\n      chatParticipants: [],\n      searchQuery: '',\n      searchResults: []\n    };\n    return _this;\n  }\n  _createClass(NewChatScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchContacts();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$state2 = this.state,\n        chatName = _this$state2.chatName,\n        searchQuery = _this$state2.searchQuery,\n        searchResults = _this$state2.searchResults,\n        chatParticipants = _this$state2.chatParticipants;\n      return _jsxs(View, {\n        children: [_jsx(TextInput, {\n          placeholder: \"Chat name\",\n          value: chatName,\n          onChangeText: this.handleChatNameChange\n        }), _jsx(TextInput, {\n          placeholder: \"Search contacts\",\n          value: searchQuery,\n          onChangeText: this.handleSearchChange\n        }), _jsx(Button, {\n          title: \"Search\",\n          onPress: this.handleSearch\n        }), _jsx(FlatList, {\n          data: searchResults,\n          renderItem: function renderItem(_ref5) {\n            var item = _ref5.item;\n            return _jsxs(View, {\n              children: [_jsxs(Text, {\n                children: [item.name, \" (\", item.userId, \")\"]\n              }), _jsx(Button, {\n                title: \"Add to chat\",\n                onPress: function onPress() {\n                  return _this2.addToChat(item);\n                }\n              })]\n            });\n          },\n          keyExtractor: function keyExtractor(item) {\n            return item.userId.toString();\n          }\n        }), _jsx(Text, {\n          children: \"Participants:\"\n        }), _jsx(FlatList, {\n          data: chatParticipants,\n          renderItem: function renderItem(_ref6) {\n            var item = _ref6.item;\n            return _jsxs(Text, {\n              children: [item.name, \" (\", item.userId, \")\"]\n            });\n          },\n          keyExtractor: function keyExtractor(item) {\n            return item.userId.toString();\n          }\n        }), _jsx(Button, {\n          title: \"Create Chat\",\n          onPress: this.createNewChat\n        })]\n      });\n    }\n  }]);\n  return NewChatScreen;\n}(Component);\nexport default NewChatScreen;","map":{"version":3,"names":["React","Component","Text","View","TextInput","Button","FlatList","TouchableOpacity","Alert","AsyncStorage","jsx","_jsx","jsxs","_jsxs","NewChatScreen","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","handleChatNameChange","text","setState","chatName","handleSearchChange","searchQuery","handleSearch","_asyncToGenerator","state","user","searchUsers","searchResults","fetchContacts","_ref2","_x","apply","arguments","addToChat","contact","prevState","chatParticipants","concat","_toConsumableArray","createNewChat","_this$state","length","response","fetch","method","headers","getItem","body","JSON","stringify","name","participants","map","participant","userId","status","alert","error","toString","_createClass","key","value","componentDidMount","render","_this2","_this$state2","children","placeholder","onChangeText","title","onPress","data","renderItem","_ref5","item","keyExtractor","_ref6"],"sources":["C:/Users/44773/Desktop/Assingment/components/NewChat.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Text, View, TextInput, Button, FlatList, TouchableOpacity, Alert } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nclass NewChatScreen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      chatName: '',\r\n      chatParticipants: [],\r\n      searchQuery: '',\r\n      searchResults: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchContacts();\r\n  }\r\n\r\n  handleChatNameChange = (text) => {\r\n    this.setState({ chatName: text });\r\n  }\r\n\r\n  handleSearchChange = (searchQuery) => {\r\n    this.setState({ searchQuery });\r\n  };\r\n\r\n  handleSearch = async () => {\r\n    if (this.state.searchQuery) {\r\n      const user = await this.searchUsers(this.state.searchQuery);\r\n      this.setState({ searchResults: user ? [user] : [] });\r\n    } else {\r\n      this.fetchContacts();\r\n    }\r\n  };\r\n  \r\n  searchUsers = async (searchQuery) => {\r\n    // ...your existing implementation...\r\n  };\r\n\r\n  fetchContacts = async () => {\r\n    // ...your existing implementation...\r\n  };\r\n\r\n  addToChat = (contact) => {\r\n    this.setState(prevState => ({ chatParticipants: [...prevState.chatParticipants, contact] }));\r\n  }\r\n\r\n  createNewChat = async () => {\r\n    const { chatName, chatParticipants } = this.state;\r\n\r\n    if (chatName && chatParticipants.length > 0) {\r\n      try {\r\n        const response = await fetch('http://localhost:3333/api/1.0.0/chat', {\r\n          method: 'POST',\r\n          headers: {\r\n            'X-Authorization': await AsyncStorage.getItem('whatsthat_session_token'),\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            name: chatName,\r\n            participants: chatParticipants.map(participant => participant.userId)\r\n          }),\r\n        });\r\n\r\n        if (response.status === 201) {\r\n          Alert.alert('Success', 'New chat created successfully');\r\n        } else {\r\n          throw 'Server Error';\r\n        }\r\n      } catch (error) {\r\n        Alert.alert('Error', error.toString());\r\n      }\r\n    } else {\r\n      Alert.alert('Error', 'Please input chat name and add at least one participant');\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { chatName, searchQuery, searchResults, chatParticipants } = this.state;\r\n\r\n    return (\r\n      <View>\r\n        <TextInput\r\n          placeholder=\"Chat name\"\r\n          value={chatName}\r\n          onChangeText={this.handleChatNameChange}\r\n        />\r\n\r\n        <TextInput\r\n          placeholder=\"Search contacts\"\r\n          value={searchQuery}\r\n          onChangeText={this.handleSearchChange}\r\n        />\r\n        <Button title=\"Search\" onPress={this.handleSearch} />\r\n\r\n        <FlatList\r\n          data={searchResults}\r\n          renderItem={({ item }) => (\r\n            <View>\r\n              <Text>{item.name} ({item.userId})</Text>\r\n              <Button title=\"Add to chat\" onPress={() => this.addToChat(item)} />\r\n            </View>\r\n          )}\r\n          keyExtractor={(item) => item.userId.toString()}\r\n          />\r\n  \r\n          <Text>Participants:</Text>\r\n          <FlatList\r\n            data={chatParticipants}\r\n            renderItem={({ item }) => <Text>{item.name} ({item.userId})</Text>}\r\n            keyExtractor={(item) => item.userId.toString()}\r\n          />\r\n  \r\n          <Button title=\"Create Chat\" onPress={this.createNewChat} />\r\n        </View>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default NewChatScreen;\r\n  \r\n         \r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}