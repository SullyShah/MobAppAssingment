{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport AddContactsScreen from \"./AddContactsScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nvar ContactScreen = function (_Component) {\n  _inherits(ContactScreen, _Component);\n  var _super = _createSuper(ContactScreen);\n  function ContactScreen(props) {\n    var _this;\n    _classCallCheck(this, ContactScreen);\n    _this = _super.call(this, props);\n    _this.state = {\n      contacts: []\n    };\n    return _this;\n  }\n  _createClass(ContactScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchContacts();\n    }\n  }, {\n    key: \"fetchContacts\",\n    value: function () {\n      var _fetchContacts = _asyncToGenerator(function* () {\n        try {\n          var response = yield this.GetContacts();\n          this.setState({\n            contacts: response\n          });\n        } catch (error) {\n          console.error(error);\n        }\n      });\n      function fetchContacts() {\n        return _fetchContacts.apply(this, arguments);\n      }\n      return fetchContacts;\n    }()\n  }, {\n    key: \"GetContacts\",\n    value: function () {\n      var _GetContacts = _asyncToGenerator(function* () {\n        return fetch(\"http://localhost:3333/api/1.0.0/\", {\n          method: \"GET\",\n          headers: {\n            \"X-Authorisation\": yield AsyncStorage.getItem(\"whatsthat_user_id\")\n          }\n        }).then(function (response) {\n          if (response.status === 200) {\n            return response.json();\n          } else if (response.status === 401) {\n            throw \"Unauthorised\";\n          } else {\n            throw \"Server Error\";\n          }\n        });\n      });\n      function GetContacts() {\n        return _GetContacts.apply(this, arguments);\n      }\n      return GetContacts;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var navigation = this.props.navigation;\n      return _jsxs(View, {\n        children: [_jsx(Text, {\n          children: \"Contact Screen\"\n        }), _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return navigation.navigate('AddContact');\n          },\n          children: _jsx(Text, {\n            children: \"Add Contact\"\n          })\n        })]\n      });\n    }\n  }]);\n  return ContactScreen;\n}(Component);\nContactScreen.navigationOptions = {\n  header: null\n};\nfunction ContactNavigatorScreen() {\n  return _jsxs(Stack.Navigator, {\n    children: [_jsx(Stack.Screen, {\n      name: \"Contacts\",\n      component: ContactScreen\n    }), _jsx(Stack.Screen, {\n      name: \"AddContact\",\n      component: AddContactsScreen\n    })]\n  });\n}\nexport default ContactNavigatorScreen;","map":{"version":3,"names":["React","Component","Text","View","TouchableOpacity","NavigationContainer","createNativeStackNavigator","AddContactsScreen","jsx","_jsx","jsxs","_jsxs","Stack","ContactScreen","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","state","contacts","_createClass","key","value","componentDidMount","fetchContacts","_fetchContacts","_asyncToGenerator","response","GetContacts","setState","error","console","apply","arguments","_GetContacts","fetch","method","headers","AsyncStorage","getItem","then","status","json","render","navigation","children","onPress","navigate","navigationOptions","header","ContactNavigatorScreen","Navigator","Screen","name","component"],"sources":["C:/Users/44773/Desktop/Assingment/components/Contacts.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Text, View, TouchableOpacity } from 'react-native';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport AddContactsScreen from './AddContactsScreen';\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nclass ContactScreen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      contacts: [],\r\n    };\r\n  }\r\n\r\n  static navigationOptions = {\r\n    header: null\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchContacts();\r\n  }\r\n\r\n  async fetchContacts() {\r\n    try {\r\n      const response = await this.GetContacts();\r\n      this.setState({ contacts: response });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  async GetContacts() {\r\n    return fetch(\"http://localhost:3333/api/1.0.0/\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"X-Authorisation\": await AsyncStorage.getItem(\"whatsthat_user_id\"),\r\n      }\r\n    })\r\n    .then((response) => {\r\n      if (response.status === 200) {\r\n        return response.json();\r\n      } else if (response.status === 401) {\r\n        throw \"Unauthorised\"\r\n      } else {\r\n        throw \"Server Error\"\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { navigation } = this.props;\r\n\r\n    return (\r\n      <View>\r\n        <Text>Contact Screen</Text>\r\n        <TouchableOpacity onPress={() => navigation.navigate('AddContact')}>\r\n          <Text>Add Contact</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nfunction ContactNavigatorScreen() {\r\n  return (\r\n    <Stack.Navigator>\r\n      <Stack.Screen name=\"Contacts\" component={ContactScreen} />\r\n      <Stack.Screen name=\"AddContact\" component={AddContactsScreen} />\r\n    </Stack.Navigator>\r\n  );\r\n}\r\n\r\nexport default ContactNavigatorScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}