{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React, { Component } from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar NewChatScreen = function (_Component) {\n  _inherits(NewChatScreen, _Component);\n  var _super = _createSuper(NewChatScreen);\n  function NewChatScreen(props) {\n    var _this;\n    _classCallCheck(this, NewChatScreen);\n    _this = _super.call(this, props);\n    _this.ChatName = function (text) {\n      _this.setState({\n        newChatName: text\n      });\n    };\n    _this.startConversation = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch('http://localhost:3333/api/1.0.0/chat', {\n          method: 'POST',\n          headers: {\n            'X-Authorization': yield AsyncStorage.getItem('whatsthat_session_token'),\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: _this.state.newChatName\n          })\n        });\n        if (response.status === 201) {\n          var chatDetails = yield response.json();\n          _this.props.navigation.navigate('Chat', {\n            chat_id: chatDetails.id,\n            chatDetails: chatDetails\n          });\n          _this.showModal('Success', 'Chat created');\n        } else if (response.status === 400) {\n          throw 'Bad Request';\n        } else if (response.status === 401) {\n          throw 'Unauthorised';\n        } else {\n          throw 'Server Error';\n        }\n      } catch (error) {\n        console.log(\"Error in startConversation: \", error);\n        _this.showModal('Error', error.toString());\n      }\n    });\n    _this.createNewChat = _asyncToGenerator(function* () {\n      try {\n        console.log(\"Attempting to start chat...\");\n        yield _this.startConversation();\n      } catch (error) {\n        console.log(\"Failed to start chat: \", error);\n        _this.showModal('Error', error.toString());\n      }\n    });\n    _this.showModal = function (title, message) {\n      _this.setState({\n        modalVisible: true,\n        modalTitle: title,\n        modalMessage: message\n      });\n    };\n    _this.hideModal = function () {\n      _this.setState({\n        modalVisible: false\n      });\n    };\n    _this.state = {\n      newChatName: '',\n      modalVisible: false,\n      modalMessage: ''\n    };\n    return _this;\n  }\n  _createClass(NewChatScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n        newChatName = _this$state.newChatName,\n        modalVisible = _this$state.modalVisible,\n        modalTitle = _this$state.modalTitle,\n        modalMessage = _this$state.modalMessage;\n      return _jsxs(View, {\n        children: [_jsx(TextInput, {\n          placeholder: \"Enter Chat Name\",\n          value: newChatName,\n          onChangeText: this.ChatName\n        }), _jsx(Button, {\n          title: \"Create Chat\",\n          onPress: this.createNewChat\n        }), _jsx(Modal, {\n          visible: modalVisible,\n          onRequestClose: this.hideModal,\n          children: _jsxs(View, {\n            style: styles.modalContent,\n            children: [_jsx(Text, {\n              style: styles.modalTitle,\n              children: modalTitle\n            }), _jsx(Text, {\n              style: styles.modalMessage,\n              children: modalMessage\n            }), _jsx(Button, {\n              title: \"Close\",\n              onPress: this.hideModal\n            })]\n          })\n        })]\n      });\n    }\n  }]);\n  return NewChatScreen;\n}(Component);\nvar styles = StyleSheet.create({\n  modalContent: {\n    backgroundColor: '#fff',\n    padding: 20,\n    borderRadius: 10,\n    alignItems: 'center'\n  },\n  modalTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 10\n  },\n  modalMessage: {\n    fontSize: 18,\n    marginBottom: 10\n  }\n});\nexport default NewChatScreen;","map":{"version":3,"names":["React","Component","TextInput","Button","Alert","View","Modal","Text","StyleSheet","AsyncStorage","jsx","_jsx","jsxs","_jsxs","NewChatScreen","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","ChatName","text","setState","newChatName","startConversation","_asyncToGenerator","response","fetch","method","headers","getItem","body","JSON","stringify","name","state","status","chatDetails","json","navigation","navigate","chat_id","id","showModal","error","console","log","toString","createNewChat","title","message","modalVisible","modalTitle","modalMessage","hideModal","_createClass","key","value","render","_this$state","children","placeholder","onChangeText","onPress","visible","onRequestClose","style","styles","modalContent","create","backgroundColor","padding","borderRadius","alignItems","fontSize","fontWeight","marginBottom"],"sources":["C:/Users/44773/Desktop/Assingment/components/NewChat.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { TextInput, Button, Alert, View, Modal, Text, StyleSheet } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nclass NewChatScreen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      newChatName: '',\r\n      modalVisible: false,\r\n      modalMessage: '',\r\n    };\r\n  }\r\n\r\n  ChatName = (text) => {\r\n    this.setState({ newChatName: text });\r\n  }  \r\n\r\n  startConversation = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3333/api/1.0.0/chat', {\r\n        method: 'POST',\r\n        headers: {\r\n          'X-Authorization': await AsyncStorage.getItem('whatsthat_session_token'),\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({name: this.state.newChatName}),\r\n      });\r\n\r\n      if (response.status === 201) {\r\n        const chatDetails = await response.json();\r\n        this.props.navigation.navigate('Chat', { \r\n          chat_id: chatDetails.id, \r\n          chatDetails: chatDetails  \r\n        });\r\n        this.showModal('Success', 'Chat created');\r\n      } else if (response.status === 400) {\r\n        throw 'Bad Request';\r\n      } else if (response.status === 401) {\r\n        throw 'Unauthorised';\r\n      } else {\r\n        throw 'Server Error';\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in startConversation: \", error);\r\n      this.showModal('Error', error.toString());\r\n    }\r\n  }\r\n\r\n  createNewChat = async () => {\r\n    try {\r\n      console.log(\"Attempting to start chat...\");\r\n      await this.startConversation();\r\n    } catch (error) {\r\n      console.log(\"Failed to start chat: \", error);\r\n      this.showModal('Error', error.toString());\r\n    }\r\n  };\r\n\r\n  showModal = (title, message) => {\r\n    this.setState({\r\n      modalVisible: true,\r\n      modalTitle: title,\r\n      modalMessage: message,\r\n    });\r\n  };\r\n\r\n  hideModal = () => {\r\n    this.setState({ modalVisible: false });\r\n  };\r\n\r\n  render() {\r\n    const { newChatName, modalVisible, modalTitle, modalMessage } = this.state;\r\n\r\n    return (\r\n      <View>\r\n        <TextInput\r\n          placeholder=\"Enter Chat Name\"\r\n          value={newChatName}\r\n          onChangeText={this.ChatName}\r\n        />\r\n        <Button title=\"Create Chat\" onPress={this.createNewChat} />\r\n\r\n        <Modal visible={modalVisible} onRequestClose={this.hideModal}>\r\n          <View style={styles.modalContent}>\r\n            <Text style={styles.modalTitle}>{modalTitle}</Text>\r\n            <Text style={styles.modalMessage}>{modalMessage}</Text>\r\n            <Button title=\"Close\" onPress={this.hideModal} />\r\n          </View>\r\n        </Modal>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  modalContent: {\r\n    backgroundColor: '#fff',\r\n    padding: 20,\r\n    borderRadius: 10,\r\n    alignItems: 'center',\r\n  },\r\n  modalTitle: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    marginBottom: 10,\r\n  },\r\n  modalMessage: {\r\n    fontSize: 18,\r\n    marginBottom: 10,\r\n  },\r\n});\r\n\r\nexport default NewChatScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}