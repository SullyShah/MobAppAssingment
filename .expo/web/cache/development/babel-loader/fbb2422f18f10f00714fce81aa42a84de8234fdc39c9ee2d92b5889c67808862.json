{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar NewChatScreen = function (_Component) {\n  _inherits(NewChatScreen, _Component);\n  var _super = _createSuper(NewChatScreen);\n  function NewChatScreen(props) {\n    var _this;\n    _classCallCheck(this, NewChatScreen);\n    _this = _super.call(this, props);\n    _this.handleChatIdInputChange = function (text) {\n      _this.setState({\n        newChatUserId: text\n      });\n    };\n    _this.createNewChat = _asyncToGenerator(function* () {\n      var newChatUserId = _this.state.newChatUserId;\n      if (newChatUserId) {\n        try {\n          yield _this.startConversation(newChatUserId);\n          Alert.alert('Success', 'New chat created successfully');\n        } catch (error) {\n          Alert.alert('Error', error.toString());\n        }\n      } else {\n        Alert.alert('Error', 'Please input User ID');\n      }\n    });\n    _this.state = {\n      newChatUserId: ''\n    };\n    return _this;\n  }\n  _createClass(NewChatScreen, [{\n    key: \"startConversation\",\n    value: function () {\n      var _startConversation = _asyncToGenerator(function* (userId) {\n        try {\n          var response = yield fetch('http://localhost:3333/api/1.0.0/chat', {\n            method: 'POST',\n            headers: {\n              'X-Authorization': yield AsyncStorage.getItem('whatsthat_session_token'),\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              users: [userId]\n            })\n          });\n          if (response.status === 201) {\n            var chatDetails = yield response.json();\n            console.log(\"Chat Created Successfully\");\n          } else if (response.status === 400) {\n            throw 'Bad Request';\n          } else if (response.status === 401) {\n            throw 'Unauthorised';\n          } else {\n            throw 'Server Error';\n          }\n        } catch (error) {\n          Alert.alert('Error', error.toString());\n        }\n      });\n      function startConversation(_x) {\n        return _startConversation.apply(this, arguments);\n      }\n      return startConversation;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var newChatUserId = this.state.newChatUserId;\n      return _jsxs(View, {\n        children: [_jsx(TextInput, {\n          placeholder: \"Enter user ID\",\n          value: newChatUserId,\n          onChangeText: this.handleChatIdInputChange\n        }), _jsx(Button, {\n          title: \"Create Chat\",\n          onPress: this.createNewChat\n        })]\n      });\n    }\n  }]);\n  return NewChatScreen;\n}(Component);\nexport default NewChatScreen;","map":{"version":3,"names":["React","Component","Text","View","TextInput","Button","AsyncStorage","Alert","jsx","_jsx","jsxs","_jsxs","NewChatScreen","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","handleChatIdInputChange","text","setState","newChatUserId","createNewChat","_asyncToGenerator","state","startConversation","alert","error","toString","_createClass","key","value","_startConversation","userId","response","fetch","method","headers","getItem","body","JSON","stringify","users","status","chatDetails","json","console","log","_x","apply","arguments","render","children","placeholder","onChangeText","title","onPress"],"sources":["C:/Users/44773/Desktop/Assingment/components/NewChat.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Text, View, TextInput, Button, AsyncStorage, Alert } from 'react-native';\r\n\r\nclass NewChatScreen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      newChatUserId: '',\r\n    };\r\n  }\r\n\r\n  handleChatIdInputChange = (text) => {\r\n    this.setState({ newChatUserId: text });\r\n  }\r\n\r\n  createNewChat = async () => {\r\n    const { newChatUserId } = this.state;\r\n\r\n    if (newChatUserId) {\r\n      try {\r\n        await this.startConversation(newChatUserId);\r\n        Alert.alert('Success', 'New chat created successfully');\r\n      } catch (error) {\r\n        Alert.alert('Error', error.toString());\r\n      }\r\n    } else {\r\n      Alert.alert('Error', 'Please input User ID');\r\n    }\r\n  };\r\n\r\n  async startConversation(userId) {\r\n    try {\r\n      const response = await fetch('http://localhost:3333/api/1.0.0/chat', {\r\n        method: 'POST',\r\n        headers: {\r\n          'X-Authorization': await AsyncStorage.getItem('whatsthat_session_token'),\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ users: [userId] }),\r\n      });\r\n\r\n      if (response.status === 201) {\r\n        const chatDetails = await response.json();\r\n        console.log(\"Chat Created Successfully\")\r\n        // Navigate to the ChatDetails screen with the newly created chat.\r\n        // Replace 'ChatDetails' with the correct screen name.\r\n        // this.props.navigation.navigate('ChatDetails', { chat: chatDetails });\r\n      } else if (response.status === 400) {\r\n        throw 'Bad Request';\r\n      } else if (response.status === 401) {\r\n        throw 'Unauthorised';\r\n      } else {\r\n        throw 'Server Error';\r\n      }\r\n    } catch (error) {\r\n      Alert.alert('Error', error.toString());\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { newChatUserId } = this.state;\r\n\r\n    return (\r\n      <View>\r\n        <TextInput\r\n          placeholder=\"Enter user ID\"\r\n          value={newChatUserId}\r\n          onChangeText={this.handleChatIdInputChange}\r\n        />\r\n        <Button title=\"Create Chat\" onPress={this.createNewChat} />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewChatScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}