{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React, { Component } from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar NewChatScreen = function (_Component) {\n  _inherits(NewChatScreen, _Component);\n  var _super = _createSuper(NewChatScreen);\n  function NewChatScreen(props) {\n    var _this;\n    _classCallCheck(this, NewChatScreen);\n    _this = _super.call(this, props);\n    _this.ChatName = function (text) {\n      _this.setState({\n        newChatName: text\n      });\n    };\n    _this.startConversation = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch('http://localhost:3333/api/1.0.0/chat', {\n          method: 'POST',\n          headers: {\n            'X-Authorization': yield AsyncStorage.getItem('whatsthat_session_token'),\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: _this.state.newChatName\n          })\n        });\n        console.log(\"Response: \", response);\n        if (response.status === 201) {\n          var chatDetails = yield response.json();\n          console.log(\"Chat Details: \", chatDetails);\n          _this.props.navigation.navigate('AddToChat', {\n            chat_id: chatDetails.id,\n            chatDetails: chatDetails\n          });\n          return chatDetails;\n        } else if (response.status === 400) {\n          throw 'Bad Request';\n        } else if (response.status === 401) {\n          throw 'Unauthorised';\n        } else {\n          throw 'Server Error';\n        }\n      } catch (error) {\n        console.log(\"Error in startConversation: \", error);\n        Alert.alert('Error', error.toString());\n      }\n    });\n    _this.createNewChat = _asyncToGenerator(function* () {\n      try {\n        console.log(\"Attempting to start chat...\");\n        var chatDetails = yield _this.startConversation();\n        Alert.alert('Success', 'Chat created');\n      } catch (error) {\n        console.log(\"Failed to start chat: \", error);\n        Alert.alert('Error', error.toString());\n      }\n    });\n    _this.state = {\n      newChatName: ''\n    };\n    return _this;\n  }\n  _createClass(NewChatScreen, [{\n    key: \"render\",\n    value: function render() {\n      var newChatName = this.state.newChatName;\n      return _jsxs(View, {\n        children: [_jsx(TextInput, {\n          placeholder: \"Enter Chat Name\",\n          value: newChatName,\n          onChangeText: this.ChatName\n        }), _jsx(Button, {\n          title: \"Create Chat\",\n          onPress: this.createNewChat\n        })]\n      });\n    }\n  }]);\n  return NewChatScreen;\n}(Component);\nexport default NewChatScreen;","map":{"version":3,"names":["React","Component","TextInput","Button","Alert","View","AsyncStorage","jsx","_jsx","jsxs","_jsxs","NewChatScreen","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","ChatName","text","setState","newChatName","startConversation","_asyncToGenerator","response","fetch","method","headers","getItem","body","JSON","stringify","name","state","console","log","status","chatDetails","json","navigation","navigate","chat_id","id","error","alert","toString","createNewChat","_createClass","key","value","render","children","placeholder","onChangeText","title","onPress"],"sources":["C:/Users/44773/Desktop/Assingment/components/NewChat.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { TextInput, Button, Alert, View } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n\r\nclass NewChatScreen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      newChatName: '',\r\n    };\r\n  }\r\n\r\n  ChatName = (text) => {\r\n    this.setState({ newChatName: text });\r\n  }  \r\n\r\n  startConversation = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3333/api/1.0.0/chat', {\r\n        method: 'POST',\r\n        headers: {\r\n          'X-Authorization': await AsyncStorage.getItem('whatsthat_session_token'),\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({name: this.state.newChatName}),\r\n      });\r\n      console.log(\"Response: \", response);\r\n      if (response.status === 201) {\r\n        const chatDetails = await response.json();\r\n        console.log(\"Chat Details: \", chatDetails);\r\n        this.props.navigation.navigate('AddToChat', { \r\n          chat_id: chatDetails.id, \r\n          chatDetails: chatDetails  \r\n        });\r\n        return chatDetails;  \r\n      } else if (response.status === 400) {\r\n        throw 'Bad Request';\r\n      } else if (response.status === 401) {\r\n        throw 'Unauthorised';\r\n      } else {\r\n        throw 'Server Error';\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in startConversation: \", error);\r\n      Alert.alert('Error', error.toString());\r\n    }\r\n  }\r\n\r\n  createNewChat = async () => {\r\n    try {\r\n      console.log(\"Attempting to start chat...\");\r\n      const chatDetails = await this.startConversation();\r\n      Alert.alert('Success', 'Chat created');\r\n    } catch (error) {\r\n      console.log(\"Failed to start chat: \", error);\r\n      Alert.alert('Error', error.toString());\r\n    }\r\n  };\r\n  \r\n  render() {\r\n    const { newChatName } = this.state;\r\n\r\n    return (\r\n      <View>\r\n        <TextInput\r\n          placeholder=\"Enter Chat Name\"\r\n          value={newChatName}\r\n          onChangeText={this.ChatName}\r\n        />\r\n        <Button title=\"Create Chat\" onPress={this.createNewChat} />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewChatScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}