{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar NewChatScreen = function (_Component) {\n  _inherits(NewChatScreen, _Component);\n  var _super = _createSuper(NewChatScreen);\n  function NewChatScreen(props) {\n    var _this;\n    _classCallCheck(this, NewChatScreen);\n    _this = _super.call(this, props);\n    _this.handleChatIdInputChange = function (text) {\n      _this.setState({\n        newChatUserId: text\n      });\n    };\n    _this.handleNewMessageChange = function (text) {\n      _this.setState({\n        newMessage: text\n      });\n    };\n    _this.createNewChat = _asyncToGenerator(function* () {\n      var _this$state = _this.state,\n        newChatUserId = _this$state.newChatUserId,\n        newMessage = _this$state.newMessage;\n      if (newChatUserId && newMessage) {\n        try {\n          console.log(\"Attempting to start conversation...\");\n          var chatDetails = yield _this.startConversation(newChatUserId);\n          Alert.alert('Success', 'New chat created successfully');\n          yield _this.SendMessage(chatDetails.chat_id, newMessage);\n        } catch (error) {\n          console.log(\"Failed to start conversation: \", error);\n          Alert.alert('Error', error.toString());\n        }\n      } else {\n        Alert.alert('Error', 'Please input User ID and a message');\n      }\n    });\n    _this.state = {\n      newChatUserId: '',\n      newMessage: ''\n    };\n    return _this;\n  }\n  _createClass(NewChatScreen, [{\n    key: \"startConversation\",\n    value: function () {\n      var _startConversation = _asyncToGenerator(function* (userId) {\n        try {\n          var token = yield AsyncStorage.getItem('whatsthat_session_token');\n          var response = yield fetch('http://localhost:3333/api/1.0.0/chat', {\n            method: 'POST',\n            headers: {\n              'X-Authorization': token,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              name: userId\n            })\n          });\n          console.log(\"Response: \", response);\n          if (response.status === 201) {\n            var chatDetails = yield response.json();\n            console.log(\"Chat Details: \", chatDetails);\n            return chatDetails;\n          } else if (response.status === 400) {\n            throw 'Bad Request';\n          } else if (response.status === 401) {\n            throw 'Unauthorised';\n          } else {\n            throw 'Server Error';\n          }\n        } catch (error) {\n          console.log(\"Error in startConversation: \", error);\n          Alert.alert('Error', error.toString());\n        }\n      });\n      function startConversation(_x) {\n        return _startConversation.apply(this, arguments);\n      }\n      return startConversation;\n    }()\n  }, {\n    key: \"SendMessage\",\n    value: function () {\n      var _SendMessage = _asyncToGenerator(function* (chatId, message) {\n        try {\n          var response = yield fetch(\"http://localhost:3333/api/1.0.0/chat/\" + chat_id + \"/message\", {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'X-Authorization': yield AsyncStorage.getItem('whatsthat_session_token')\n            },\n            body: JSON.stringify({\n              message: message\n            })\n          });\n          if (response.status === 200) {\n            console.log('Message sent');\n          } else if (response.status === 400) {\n            console.log('Bad Request');\n          } else if (response.status === 401) {\n            console.log('Unauthorised');\n            yield AsyncStorage.removeItem('whatsthat_session_token');\n            yield AsyncStorage.removeItem('whatsthat_user_id');\n            this.props.navigation.navigate('Login');\n          } else if (response.status === 403) {\n            console.log('Forbidden');\n          } else if (response.status === 404) {\n            console.log('Not Found');\n          } else {\n            throw 'Server Error';\n          }\n        } catch (error) {\n          this.setState({\n            error: error\n          });\n        }\n      });\n      function SendMessage(_x2, _x3) {\n        return _SendMessage.apply(this, arguments);\n      }\n      return SendMessage;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n        newChatUserId = _this$state2.newChatUserId,\n        newMessage = _this$state2.newMessage;\n      return _jsxs(View, {\n        children: [_jsx(TextInput, {\n          placeholder: \"Enter user ID\",\n          value: newChatUserId,\n          onChangeText: this.handleChatIdInputChange\n        }), _jsx(TextInput, {\n          placeholder: \"Enter your message\",\n          value: newMessage,\n          onChangeText: this.handleNewMessageChange\n        }), _jsx(Button, {\n          title: \"Create Chat\",\n          onPress: this.createNewChat\n        })]\n      });\n    }\n  }]);\n  return NewChatScreen;\n}(Component);\nexport default NewChatScreen;","map":{"version":3,"names":["React","Component","Text","View","TextInput","Button","Alert","AsyncStorage","jsx","_jsx","jsxs","_jsxs","NewChatScreen","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","handleChatIdInputChange","text","setState","newChatUserId","handleNewMessageChange","newMessage","createNewChat","_asyncToGenerator","_this$state","state","console","log","chatDetails","startConversation","alert","SendMessage","chat_id","error","toString","_createClass","key","value","_startConversation","userId","token","getItem","response","fetch","method","headers","body","JSON","stringify","name","status","json","_x","apply","arguments","_SendMessage","chatId","message","removeItem","navigation","navigate","_x2","_x3","render","_this$state2","children","placeholder","onChangeText","title","onPress"],"sources":["C:/Users/44773/Desktop/Assingment/components/NewChat.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Text, View, TextInput, Button, Alert } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nclass NewChatScreen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      newChatUserId: '',\r\n      newMessage: '',\r\n    };\r\n  }\r\n\r\n  handleChatIdInputChange = (text) => {\r\n    this.setState({ newChatUserId: text });\r\n  }\r\n\r\n  handleNewMessageChange = (text) => {\r\n    this.setState({ newMessage: text });\r\n  }\r\n\r\n  createNewChat = async () => {\r\n    const { newChatUserId, newMessage } = this.state;\r\n\r\n    if (newChatUserId && newMessage) {\r\n      try {\r\n        console.log(\"Attempting to start conversation...\");\r\n        const chatDetails = await this.startConversation(newChatUserId);\r\n        Alert.alert('Success', 'New chat created successfully');\r\n        // Send a message to the newly created chat\r\n        await this.SendMessage(chatDetails.chat_id, newMessage);\r\n      } catch (error) {\r\n        console.log(\"Failed to start conversation: \", error);\r\n        Alert.alert('Error', error.toString());\r\n      }\r\n    } else {\r\n      Alert.alert('Error', 'Please input User ID and a message');\r\n    }\r\n  };\r\n\r\n  async startConversation(userId) {\r\n    try {\r\n      const token = await AsyncStorage.getItem('whatsthat_session_token');\r\n      \r\n      const response = await fetch('http://localhost:3333/api/1.0.0/chat', {\r\n        method: 'POST',\r\n        headers: {\r\n          'X-Authorization': token,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ name: userId }),\r\n        \r\n      });\r\n  \r\n      console.log(\"Response: \", response);\r\n  \r\n      if (response.status === 201) {\r\n        const chatDetails = await response.json();\r\n        console.log(\"Chat Details: \", chatDetails);\r\n        return chatDetails;  // Add this line here\r\n      } else if (response.status === 400) {\r\n        throw 'Bad Request';\r\n        \r\n      } else if (response.status === 401) {\r\n        throw 'Unauthorised';\r\n      } else {\r\n        throw 'Server Error';\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in startConversation: \", error);\r\n      Alert.alert('Error', error.toString());\r\n    }\r\n  }\r\n  \r\n\r\n  async SendMessage(chatId, message) {\r\n    try {\r\n      const response = await fetch(`http://localhost:3333/api/1.0.0/chat/${chat_id}/message`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-Authorization': await AsyncStorage.getItem('whatsthat_session_token'),\r\n        },\r\n        body: JSON.stringify({\r\n          message: message,\r\n        }),\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        console.log('Message sent');\r\n      } else if (response.status === 400) {\r\n        console.log('Bad Request');\r\n      } else if (response.status === 401) {\r\n        console.log('Unauthorised');\r\n        await AsyncStorage.removeItem('whatsthat_session_token');\r\n        await AsyncStorage.removeItem('whatsthat_user_id');\r\n        this.props.navigation.navigate('Login');\r\n      } else if (response.status === 403) {\r\n        console.log('Forbidden');\r\n      } else if (response.status === 404) {\r\n        console.log('Not Found');\r\n      } else {\r\n        throw 'Server Error';\r\n      }\r\n    } catch (error) {\r\n      this.setState({ error: error });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { newChatUserId, newMessage } = this.state;\r\n\r\n    return (\r\n      <View>\r\n        <TextInput\r\n          placeholder=\"Enter user ID\"\r\n          value={newChatUserId}\r\n          onChangeText={this.handleChatIdInputChange}\r\n        />\r\n        <TextInput\r\n          placeholder=\"Enter your message\"\r\n          value={newMessage}\r\n          onChangeText={this.handleNewMessageChange}\r\n        />\r\n        <Button title=\"Create Chat\" onPress={this.createNewChat} />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewChatScreen;\r\n\r\n\r\n// async DeleteMessage(chatId, messageId) {\r\n//   try {\r\n//     const response = await fetch('http://localhost:3333/api/1.0.0/chats/${chatId}/messages/${messageId}', {\r\n//       method: 'DELETE',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         'X-Authorisation': await AsyncStorage.getItem('whatsthat_session_token'),\r\n//       },\r\n//     });\r\n\r\n//     if (response.status === 200) {\r\n//       const chatDetails = await response.json();\r\n//       this.setState({ chatDetails: chatDetails });\r\n//     } else if (response.status === 401) {\r\n//       console.log('Unathorised');\r\n//       await AsyncStorage.removeItem('whatsthat_session_token');\r\n//       await AsyncStorage.removeItem('whatsthat_user_id');\r\n//       this.props.navigation.navigate('Login');\r\n//     } else if (response.status === 403) {\r\n//       console.log('Forbidden');\r\n//     } else if (response.status === 404) {\r\n//       console.log('Not Found');\r\n//     } else {\r\n//       throw 'Server Error';\r\n//     }\r\n//   } catch (error) {\r\n//     this.setState({ error: error });\r\n//   }\r\n// }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}