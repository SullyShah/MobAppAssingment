{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React, { Component } from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar NewChatScreen = function (_Component) {\n  _inherits(NewChatScreen, _Component);\n  var _super = _createSuper(NewChatScreen);\n  function NewChatScreen(props) {\n    var _this;\n    _classCallCheck(this, NewChatScreen);\n    _this = _super.call(this, props);\n    _this.ChatName = function (text) {\n      _this.setState({\n        newChatName: text\n      });\n    };\n    _this.createNewChat = _asyncToGenerator(function* () {\n      try {\n        console.log(\"Attempting to start chat...\");\n        var chatDetails = yield _this.startConversation();\n        Alert.alert('Success', 'Chat created');\n      } catch (error) {\n        console.log(\"Failed to start chat: \", error);\n        Alert.alert('Error', error.toString());\n      }\n    });\n    _this.state = {\n      newChatUserId: '',\n      newChatName: '',\n      contacts: [],\n      searchQuery: '',\n      filteredContacts: [],\n      newChatUserId: '',\n      chatDetails: ''\n    };\n    return _this;\n  }\n  _createClass(NewChatScreen, [{\n    key: \"startConversation\",\n    value: function () {\n      var _startConversation = _asyncToGenerator(function* () {\n        var _this2 = this;\n        try {\n          var token = yield AsyncStorage.getItem('whatsthat_session_token');\n          var response = yield fetch('http://localhost:3333/api/1.0.0/chat', {\n            method: 'POST',\n            headers: {\n              'X-Authorization': yield AsyncStorage.getItem('whatsthat_session_token'),\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              name: this.state.newChatName\n            })\n          });\n          console.log(\"Response: \", response);\n          if (response.status === 201) {\n            var chatDetails = yield response.json();\n            console.log(\"Chat Details: \", chatDetails);\n            this.setState({\n              newChatUserId: chatDetails.id\n            }, function () {\n              _this2.props.navigation.navigate('AddToChat', {\n                chat_id: _this2.state.newChatUserId,\n                chatDetails: chatDetails\n              });\n            });\n            return chatDetails;\n          } else if (response.status === 400) {\n            throw 'Bad Request';\n          } else if (response.status === 401) {\n            throw 'Unauthorised';\n          } else {\n            throw 'Server Error';\n          }\n        } catch (error) {\n          console.log(\"Error in startConversation: \", error);\n          Alert.alert('Error', error.toString());\n        }\n      });\n      function startConversation() {\n        return _startConversation.apply(this, arguments);\n      }\n      return startConversation;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n        newChatName = _this$state.newChatName,\n        filteredContacts = _this$state.filteredContacts,\n        searchQuery = _this$state.searchQuery;\n      return _jsxs(View, {\n        children: [_jsx(TextInput, {\n          placeholder: \"Enter Chat Name\",\n          value: newChatName,\n          onChangeText: this.ChatName\n        }), _jsx(Button, {\n          title: \"Create Chat\",\n          onPress: this.createNewChat\n        })]\n      });\n    }\n  }]);\n  return NewChatScreen;\n}(Component);\nexport default NewChatScreen;","map":{"version":3,"names":["React","Component","TextInput","Button","Alert","View","Text","FlatList","AsyncStorage","jsx","_jsx","jsxs","_jsxs","NewChatScreen","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","ChatName","text","setState","newChatName","createNewChat","_asyncToGenerator","console","log","chatDetails","startConversation","alert","error","toString","state","newChatUserId","contacts","searchQuery","filteredContacts","_createClass","key","value","_startConversation","_this2","token","getItem","response","fetch","method","headers","body","JSON","stringify","name","status","json","id","navigation","navigate","chat_id","apply","arguments","render","_this$state","children","placeholder","onChangeText","title","onPress"],"sources":["C:/Users/44773/Desktop/Assingment/components/NewChat.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { TextInput, Button, Alert, View, Text, FlatList } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n\r\nclass NewChatScreen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      newChatUserId: '',\r\n      newChatName: '',\r\n      contacts: [],\r\n      searchQuery: '',\r\n      filteredContacts: [],\r\n      newChatUserId:'',\r\n      chatDetails:'',\r\n    };\r\n  }\r\n\r\n  ChatName = (text) => {\r\n    this.setState({ newChatName: text });\r\n  }  \r\n\r\n  async startConversation() {\r\n    try {\r\n      const token = await AsyncStorage.getItem('whatsthat_session_token');\r\n      \r\n      const response = await fetch('http://localhost:3333/api/1.0.0/chat', {\r\n        method: 'POST',\r\n        headers: {\r\n          'X-Authorization': await AsyncStorage.getItem('whatsthat_session_token'),\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({name: this.state.newChatName}),\r\n      });\r\n      console.log(\"Response: \", response);\r\n      if (response.status === 201) {\r\n        const chatDetails = await response.json();\r\n        console.log(\"Chat Details: \", chatDetails);\r\n        this.setState({ newChatUserId: chatDetails.id }, () => {\r\n          this.props.navigation.navigate('AddToChat', { \r\n            chat_id: this.state.newChatUserId, \r\n            chatDetails: chatDetails  // Add this line\r\n          });\r\n        });\r\n        return chatDetails;  \r\n      } else if (response.status === 400) {\r\n        throw 'Bad Request';\r\n      } else if (response.status === 401) {\r\n        throw 'Unauthorised';\r\n      } else {\r\n        throw 'Server Error';\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in startConversation: \", error);\r\n      Alert.alert('Error', error.toString());\r\n    }\r\n}\r\n\r\n\r\n  createNewChat = async () => {\r\n    try {\r\n      console.log(\"Attempting to start chat...\");\r\n      const chatDetails = await this.startConversation();\r\n      Alert.alert('Success', 'Chat created');\r\n    } catch (error) {\r\n      console.log(\"Failed to start chat: \", error);\r\n      Alert.alert('Error', error.toString());\r\n    }\r\n  };\r\n  \r\n  render() {\r\n    const { newChatName, filteredContacts, searchQuery } = this.state;\r\n\r\n    return (\r\n      <View>\r\n\r\n         \r\n         <TextInput\r\n        placeholder=\"Enter Chat Name\"\r\n        value={newChatName}\r\n        onChangeText={this.ChatName}\r\n      />\r\n        <Button title=\"Create Chat\" onPress={this.createNewChat} \r\n         \r\n        />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewChatScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}