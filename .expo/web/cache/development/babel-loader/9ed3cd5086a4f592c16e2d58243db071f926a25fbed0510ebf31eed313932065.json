{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar NewChatScreen = function (_Component) {\n  _inherits(NewChatScreen, _Component);\n  var _super = _createSuper(NewChatScreen);\n  function NewChatScreen(props) {\n    var _this;\n    _classCallCheck(this, NewChatScreen);\n    _this = _super.call(this, props);\n    _this.fetchContacts = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch('http://localhost:3333/api/1.0.0//contacts', {\n          headers: {\n            'X-Authorisation': yield AsyncStorage.getItem('whatsthat_session_token')\n          }\n        });\n        if (response.ok) {\n          var contacts = yield response.json();\n          _this.setState({\n            contacts: contacts\n          });\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    });\n    _this.createNewChat = _asyncToGenerator(function* () {\n      var _this$state = _this.state,\n        newChatUserId = _this$state.newChatUserId,\n        contacts = _this$state.contacts;\n      if (newChatUserId && contacts.includes(newChatUserId)) {\n        try {\n          yield _this.startConversation([newChatUserId]);\n          Alert.alert('Success', 'New chat created successfully');\n        } catch (error) {\n          Alert.alert('Error', error.toString());\n        }\n      } else {\n        Alert.alert('Error', 'User ID is not part of your contacts');\n      }\n    });\n    _this.handleChatIdInputChange = function (text) {\n      _this.setState({\n        newChatUserId: text\n      });\n    };\n    _this.state = {\n      newChatUserId: '',\n      contacts: []\n    };\n    return _this;\n  }\n  _createClass(NewChatScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchContacts();\n    }\n  }, {\n    key: \"startConversation\",\n    value: function () {\n      var _startConversation = _asyncToGenerator(function* (userIds) {\n        try {\n          var response = yield fetch('http://localhost:3333/api/1.0.0/chat', {\n            method: 'POST',\n            headers: {\n              'X-Authorisation': yield AsyncStorage.getItem('whatsthat_session_token'),\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              users: userIds\n            })\n          });\n          if (response.status === 201) {\n            var chatDetails = yield response.json();\n            this.props.navigation.navigate('ChatDetails');\n          } else if (response.status === 400) {\n            throw 'Bad Request';\n          } else if (response.status === 401) {\n            throw 'Unauthorised';\n          } else {\n            throw 'Server Error';\n          }\n        } catch (error) {\n          Alert.alert('Error', error.toString());\n        }\n      });\n      function startConversation(_x) {\n        return _startConversation.apply(this, arguments);\n      }\n      return startConversation;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var newChatUserId = this.state.newChatUserId;\n      return _jsxs(View, {\n        children: [_jsx(TextInput, {\n          placeholder: \"Enter user ID\",\n          value: newChatUserId,\n          onChangeText: this.handleChatIdInputChange\n        }), _jsx(Button, {\n          title: \"Create Chat\",\n          onPress: this.createNewChat\n        })]\n      });\n    }\n  }]);\n  return NewChatScreen;\n}(Component);\nexport default NewChatScreen;","map":{"version":3,"names":["React","Component","Text","View","TextInput","Button","AsyncStorage","Alert","jsx","_jsx","jsxs","_jsxs","NewChatScreen","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","fetchContacts","_asyncToGenerator","response","fetch","headers","getItem","ok","contacts","json","setState","error","console","log","createNewChat","_this$state","state","newChatUserId","includes","startConversation","alert","toString","handleChatIdInputChange","text","_createClass","key","value","componentDidMount","_startConversation","userIds","method","body","JSON","stringify","users","status","chatDetails","navigation","navigate","_x","apply","arguments","render","children","placeholder","onChangeText","title","onPress"],"sources":["C:/Users/44773/Desktop/Assingment/components/NewChat.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Text, View, TextInput, Button, AsyncStorage, Alert } from 'react-native';\r\n//import AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n\r\nclass NewChatScreen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      newChatUserId: '',\r\n      contacts: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchContacts();\r\n  }\r\n\r\n  fetchContacts = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3333/api/1.0.0//contacts', {\r\n        headers: {\r\n          'X-Authorisation': await AsyncStorage.getItem('whatsthat_session_token'),\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        const contacts = await response.json();\r\n        this.setState({ contacts });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  createNewChat = async () => {\r\n    const { newChatUserId, contacts } = this.state;\r\n\r\n    if (newChatUserId && contacts.includes(newChatUserId)) {\r\n      try {\r\n        await this.startConversation([newChatUserId]);\r\n        Alert.alert('Success', 'New chat created successfully');\r\n      } catch (error) {\r\n        Alert.alert('Error', error.toString());\r\n      }\r\n    } else {\r\n      Alert.alert('Error', 'User ID is not part of your contacts');\r\n    }\r\n  };\r\n\r\n  handleChatIdInputChange = (text) => {\r\n    this.setState({ newChatUserId: text });\r\n  }\r\n\r\n  async startConversation(userIds) {\r\n    try {\r\n      const response = await fetch('http://localhost:3333/api/1.0.0/chat', {\r\n        method: 'POST',\r\n        headers: {\r\n          'X-Authorisation': await AsyncStorage.getItem('whatsthat_session_token'),\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ users: userIds }),\r\n      });\r\n\r\n      if (response.status === 201) {\r\n        const chatDetails = await response.json();\r\n        this.props.navigation.navigate('ChatDetails');\r\n      } else if (response.status === 400) {\r\n        throw 'Bad Request';\r\n      } else if (response.status === 401) {\r\n        throw 'Unauthorised';\r\n      } else {\r\n        throw 'Server Error';\r\n      }\r\n    } catch (error) {\r\n      Alert.alert('Error', error.toString());\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { newChatUserId } = this.state;\r\n\r\n    return (\r\n      <View>\r\n        <TextInput\r\n          placeholder=\"Enter user ID\"\r\n          value={newChatUserId}\r\n          onChangeText={this.handleChatIdInputChange}\r\n        />\r\n        <Button title=\"Create Chat\" onPress={this.createNewChat} />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewChatScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}